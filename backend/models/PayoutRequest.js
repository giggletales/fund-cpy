const mongoose = require('mongoose');

const payoutRequestSchema = new mongoose.Schema({
  userId: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: 'User', 
    required: true 
  },
  
  accountId: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: 'TradingAccount',
    required: true
  },
  
  configId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'PayoutConfig',
    required: true
  },
  
  period: {
    cycle: String,
    startDate: { type: Date, required: true },
    endDate: { type: Date, required: true },
    periodLabel: String
  },
  
  financials: {
    startingBalance: Number,
    endingBalance: Number,
    totalProfit: Number,
    profitPercentage: Number,
    
    payoutCycle: String,
    payoutPercentage: Number,
    calculatedPayout: Number,
    
    deductions: [{
      type: String,
      amount: Number,
      reason: String
    }],
    totalDeductions: { type: Number, default: 0 },
    
    finalPayoutAmount: { type: Number, required: true }
  },
  
  tradingStats: {
    totalTrades: Number,
    winningTrades: Number,
    losingTrades: Number,
    winRate: Number,
    profitFactor: Number,
    bestTrade: Number,
    worstTrade: Number,
    averageWin: Number,
    averageLoss: Number,
    tradingDays: Number
  },
  
  paymentInfo: {
    method: String,
    destination: String,
    network: String,
    reference: String
  },
  
  status: {
    type: String,
    enum: [
      'pending',
      'under_review',
      'approved',
      'processing',
      'completed',
      'failed',
      'rejected',
      'cancelled'
    ],
    default: 'pending'
  },
  
  statusHistory: [{
    status: String,
    timestamp: { type: Date, default: Date.now },
    note: String,
    updatedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
  }],
  
  timeline: {
    requestedAt: { type: Date, default: Date.now },
    reviewedAt: Date,
    approvedAt: Date,
    processingAt: Date,
    completedAt: Date,
    failedAt: Date,
    
    processingWindowStart: Date,
    processingWindowEnd: Date,
    expectedCompletionDate: Date
  },
  
  transactionDetails: {
    transactionId: String,
    transactionHash: String,
    confirmations: Number,
    fee: Number,
    receiptUrl: String
  },
  
  adminNotes: String,
  rejectionReason: String,
  
  autoGenerated: { type: Boolean, default: false },
  
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

payoutRequestSchema.pre('save', function(next) {
  this.updatedAt = new Date();
  
  if (this.isNew && this.status === 'pending') {
    this.timeline.processingWindowStart = new Date(Date.now() + 24 * 60 * 60 * 1000);
    this.timeline.processingWindowEnd = new Date(Date.now() + 72 * 60 * 60 * 1000);
    this.timeline.expectedCompletionDate = this.timeline.processingWindowEnd;
  }
  
  next();
});

module.exports = mongoose.model('PayoutRequest', payoutRequestSchema);
